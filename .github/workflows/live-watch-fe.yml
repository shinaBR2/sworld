# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy Live Watch Frontend
'on':
  push:
    branches:
      - main
    paths:
      - 'apps/watch/**'
      - 'packages/core/**'
      - 'packages/ui/**'
      - '.github/workflows/live-watch-fe.yml'

jobs:
  dev_deploy:
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.0.0
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20.10.0
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Copy .firebaserc file
        run: cp .firebaserc apps/watch/.firebaserc
      - name: Copy firebase.json file
        run: cp firebase.json apps/watch/firebase.json
      - name: Build
        run: pnpm build --filter=watch
        env:
          VITE_API_KEY: ${{ secrets.VITE_API_KEY }}
          VITE_PROJECT_ID: ${{ secrets.VITE_PROJECT_ID }}
          VITE_STORAGE_BUCKET: ${{ secrets.VITE_STORAGE_BUCKET }}
          VITE_MESSAGING_SENDER_ID: ${{ secrets.VITE_MESSAGING_SENDER_ID }}
          VITE_APP_ID: ${{ secrets.VITE_APP_ID }}
          VITE_MEASUREMENT_ID: ${{ secrets.VITE_MEASUREMENT_ID }}
          VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
          VITE_AUTH0_CLIENT_ID: ${{ secrets.VITE_AUTH0_CLIENT_ID }}
          VITE_HASURA_DOMAIN: ${{ vars.VITE_HASURA_DOMAIN }}
          VITE_MAIN_SITE_URL: ${{ vars.VITE_MAIN_SITE_URL }}
          VITE_LISTEN_SITE_URL: ${{ vars.VITE_LISTEN_SITE_URL }}
          VITE_WATCH_SITE_URL: ${{ vars.VITE_WATCH_SITE_URL }}
          VITE_PLAY_SITE_URL: ${{ vars.VITE_PLAY_SITE_URL }}
          VITE_ROLLBAR_TOKEN: ${{ vars.VITE_ROLLBAR_TOKEN }}
          VITE_ROLLBAR_ENV: 'development'
      - name: Notify start deploy to Rollbar
        uses: rollbar/github-deploy-action@2.1.2
        id: rollbar_pre_deploy_dev
        with:
          environment: 'development'
          version: ${{ github.sha }}
          status: 'started'
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_SERVER_TOKEN }}
          ROLLBAR_USERNAME: ${{ github.actor }}
      - name: Deploy watch
        uses: FirebaseExtended/action-hosting-deploy@v0.9.0
        with:
          target: 'watch'
          entryPoint: 'apps/watch'
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_MY_WORLD_DEV }}'
          projectId: ${{ secrets.VITE_PROJECT_ID }}
          channelId: live
      - name: Notify finish deploy to Rollbar
        uses: rollbar/github-deploy-action@2.1.2
        id: rollbar_post_deploy_dev
        with:
          environment: 'development'
          version: ${{ github.sha }}
          status: 'succeeded'
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_SERVER_TOKEN }}
          ROLLBAR_USERNAME: ${{ github.actor }}
          DEPLOY_ID: ${{ steps.rollbar_pre_deploy_dev.outputs.deploy_id }}

  prod_deploy:
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup pnpm
        uses: pnpm/action-setup@v4.0.0
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 20.10.0
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Copy .firebaserc file
        run: cp .firebaserc apps/watch/.firebaserc
      - name: Copy firebase.json file
        run: cp firebase.json apps/watch/firebase.json
      - name: Build
        run: pnpm build --filter=watch
        env:
          VITE_API_KEY: ${{ secrets.VITE_API_KEY }}
          VITE_PROJECT_ID: ${{ secrets.VITE_PROJECT_ID }}
          VITE_STORAGE_BUCKET: ${{ secrets.VITE_STORAGE_BUCKET }}
          VITE_MESSAGING_SENDER_ID: ${{ secrets.VITE_MESSAGING_SENDER_ID }}
          VITE_APP_ID: ${{ secrets.VITE_APP_ID }}
          VITE_MEASUREMENT_ID: ${{ secrets.VITE_MEASUREMENT_ID }}
          VITE_AUTH0_DOMAIN: ${{ secrets.VITE_AUTH0_DOMAIN }}
          VITE_AUTH0_CLIENT_ID: ${{ secrets.VITE_AUTH0_CLIENT_ID }}
          VITE_HASURA_DOMAIN: ${{ vars.VITE_HASURA_DOMAIN }}
          VITE_MAIN_SITE_URL: ${{ vars.VITE_MAIN_SITE_URL }}
          VITE_LISTEN_SITE_URL: ${{ vars.VITE_LISTEN_SITE_URL }}
          VITE_WATCH_SITE_URL: ${{ vars.VITE_WATCH_SITE_URL }}
          VITE_PLAY_SITE_URL: ${{ vars.VITE_PLAY_SITE_URL }}
          VITE_ROLLBAR_TOKEN: ${{ vars.VITE_ROLLBAR_TOKEN }}
          VITE_ROLLBAR_ENV: 'production'
      - name: Notify start deploy to Rollbar
        uses: rollbar/github-deploy-action@2.1.2
        id: rollbar_pre_deploy_prod
        with:
          environment: 'production'
          version: ${{ github.sha }}
          status: 'started'
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_SERVER_TOKEN }}
          ROLLBAR_USERNAME: ${{ github.actor }}
      - name: Deploy watch
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0.9.0
        with:
          target: 'watch'
          entryPoint: 'apps/watch'
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_SWORLD_PROD }}'
          projectId: ${{ secrets.VITE_PROJECT_ID }}
          channelId: live
      - name: Notify finish deploy to Rollbar
        uses: rollbar/github-deploy-action@2.1.2
        id: rollbar_post_deploy_prod
        with:
          environment: 'production'
          version: ${{ github.sha }}
          status: 'succeeded'
        env:
          ROLLBAR_ACCESS_TOKEN: ${{ secrets.ROLLBAR_SERVER_TOKEN }}
          ROLLBAR_USERNAME: ${{ github.actor }}
          DEPLOY_ID: ${{ steps.rollbar_pre_deploy_prod.outputs.deploy_id }}
      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ vars.VITE_WATCH_SITE_URL }}
          runs: 3
          budgetPath: apps/watch/budget.json # test performance budgets
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage
