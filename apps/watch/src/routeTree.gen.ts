/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const HistoryLazyImport = createFileRoute('/history')()
const IndexLazyImport = createFileRoute('/')()
const VideoSlugIdLazyImport = createFileRoute('/video/$slug/$id')()
const PlaylistSlugIdLazyImport = createFileRoute('/playlist/$slug/$id')()

// Create/Update Routes

const HistoryLazyRoute = HistoryLazyImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/history.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const VideoSlugIdLazyRoute = VideoSlugIdLazyImport.update({
  id: '/video/$slug/$id',
  path: '/video/$slug/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/video.$slug.$id.lazy').then((d) => d.Route),
)

const PlaylistSlugIdLazyRoute = PlaylistSlugIdLazyImport.update({
  id: '/playlist/$slug/$id',
  path: '/playlist/$slug/$id',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/playlist.$slug.$id.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryLazyImport
      parentRoute: typeof rootRoute
    }
    '/playlist/$slug/$id': {
      id: '/playlist/$slug/$id'
      path: '/playlist/$slug/$id'
      fullPath: '/playlist/$slug/$id'
      preLoaderRoute: typeof PlaylistSlugIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/video/$slug/$id': {
      id: '/video/$slug/$id'
      path: '/video/$slug/$id'
      fullPath: '/video/$slug/$id'
      preLoaderRoute: typeof VideoSlugIdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/history': typeof HistoryLazyRoute
  '/playlist/$slug/$id': typeof PlaylistSlugIdLazyRoute
  '/video/$slug/$id': typeof VideoSlugIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/history': typeof HistoryLazyRoute
  '/playlist/$slug/$id': typeof PlaylistSlugIdLazyRoute
  '/video/$slug/$id': typeof VideoSlugIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/history': typeof HistoryLazyRoute
  '/playlist/$slug/$id': typeof PlaylistSlugIdLazyRoute
  '/video/$slug/$id': typeof VideoSlugIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/history' | '/playlist/$slug/$id' | '/video/$slug/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/history' | '/playlist/$slug/$id' | '/video/$slug/$id'
  id: '__root__' | '/' | '/history' | '/playlist/$slug/$id' | '/video/$slug/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  HistoryLazyRoute: typeof HistoryLazyRoute
  PlaylistSlugIdLazyRoute: typeof PlaylistSlugIdLazyRoute
  VideoSlugIdLazyRoute: typeof VideoSlugIdLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  HistoryLazyRoute: HistoryLazyRoute,
  PlaylistSlugIdLazyRoute: PlaylistSlugIdLazyRoute,
  VideoSlugIdLazyRoute: VideoSlugIdLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/history",
        "/playlist/$slug/$id",
        "/video/$slug/$id"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/history": {
      "filePath": "history.lazy.tsx"
    },
    "/playlist/$slug/$id": {
      "filePath": "playlist.$slug.$id.lazy.tsx"
    },
    "/video/$slug/$id": {
      "filePath": "video.$slug.$id.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
